name: toolbox_builds
on: push
# on: workflow_dispatch
env:
  VERSION: '1.0.2'
  FEDORA_VER: '39'
  GO_VER: 'go1.21.4'
  RUST_VER: '1.74.0'
  RUSTUP_TAG: '1.26.0'
  RUSTARCH: 'x86_64-unknown-linux-gnu'
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Log in to ghcr.io
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
          registry: ghcr.io/${{ github.repository_owner }}
      - name: build
        run: |
          set -euxo pipefail
          FEDORA_VER=${{ env.FEDORA_VER }}
          CONTAINER=$(buildah from quay.io/toolbx-images/fedora-toolbox:${FEDORA_VER})
          buildah run ${CONTAINER} sh -c 'dnf -y install ninja-build cmake gcc make unzip gettext' &>/dev/null
          buildah run ${CONTAINER} sh -c 'dnf -y install python3-pip age nodejs' &>/dev/null
          buildah run ${CONTAINER} sh -c 'dnf clean all' &>/dev/null
          echo 'NEOVIM'
          buildah run ${CONTAINER} sh -c 'git clone https://github.com/neovim/neovim && cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo && make install' &>/dev/null
          buildah run ${CONTAINER} sh -c 'which nvim && nvim --version'
          echo 'GOLANG'
          buildah run ${CONTAINER} sh -c 'wget -q -O go.tgz https://go.dev/dl/${{ env.GO_VER }}.linux-amd64.tar.gz && tar -C /usr/local -xzf go.tgz'
          buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/go && ln -s /usr/local/go/bin/* /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which go'
          echo 'GH-CLI'
          buildah run ${CONTAINER} sh -c 'git clone https://github.com/cli/cli.git gh-cli'
          buildah run ${CONTAINER} sh -c 'cd gh-cli && make install prefix=/usr/local/gh' &>/dev/null
          buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/gh && ln -s /usr/local/gh/bin/* /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which gh && gh --version && gh --help'
          buildah run ${CONTAINER} sh -c 'rm -fR gh-cli' || true
          echo 'COSIGN'
          buildah run ${CONTAINER} sh -c 'git clone https://github.com/sigstore/cosign'
          buildah run ${CONTAINER} sh -c 'cd cosign && go install ./cmd/cosign' &>/dev/null
          buildah run ${CONTAINER} sh -c 'ln -s $(go env GOPATH)/bin/cosign /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which cosign && cosign'
          buildah run ${CONTAINER} sh -c 'rm -fR cosign' || true
          echo 'LAZYGIT' 
          buildah run ${CONTAINER} sh -c 'git clone https://github.com/jesseduffield/lazygit.git' 
          buildah run ${CONTAINER} sh -c 'cd lazygit && go install' &>/dev/null
          buildah run ${CONTAINER} sh -c 'ln -s $(go env GOPATH)/bin/lazygit /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which lazygit'
          buildah run ${CONTAINER} sh -c 'rm -fR lazygit' || true
          echo 'CHEZMOI'
          buildah run ${CONTAINER} sh -c 'git clone https://github.com/twpayne/chezmoi.git'
          buildah run ${CONTAINER} sh -c 'cd chezmoi && PREFIX=/usr/local; make install-from-git-working-copy' &>/dev/null
          buildah run ${CONTAINER} sh -c 'ln -s $(go env GOPATH)/bin/chezmoi /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which chezmoi && chezmoi --help'
          buildah run ${CONTAINER} sh -c 'rm -fR chezmoi' || true
          echo '--------------------------'
          buildah run ${CONTAINER} sh -c 'ls -al $(go env GOPATH)' || true
          buildah run ${CONTAINER} sh -c 'ln -al $(go env GOCATCHE)' || true
          buildah run ${CONTAINER} sh -c 'ln -al $(go env GOBIN)' || true
          false
          # buildah run ${CONTAINER} sh -c 'rm $()' || true
          echo 'RUSTUP'
          buildah config --env RUSTUP_HOME=/usr/local/rustup --env CARGO_HOME=/usr/local/cargo ${CONTAINER}
          buildah run ${CONTAINER} sh -c 'curl https://sh.rustup.rs -sSf | sh -s -- -y'
          buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/rustup /usr/local/cargo && ln -s /usr/local/cargo/bin/* /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which rustup && rustup --version' 
          buildah run ${CONTAINER} sh -c 'which rustfmt && rustfmt --version'  # Formatter
          buildah run ${CONTAINER} sh -c 'which rust-analyzer' # LSP
          echo 'RUSTUP wasi targets'
          buildah run ${CONTAINER} sh -c 'rustup target add wasm32-wasi'  &>/dev/null
          buildah run ${CONTAINER} sh -c 'rustup target add wasm32-unknown-unknown'  &>/dev/null # to compile our example Wasm/WASI files for testing
          buildah run ${CONTAINER} sh -c 'rustup show' 
          echo 'CARGO'
          buildah run ${CONTAINER} sh -c 'which cargo && cargo --version && cargo --help'
          buildah run ${CONTAINER} sh -c 'cargo install cargo-wasi' &>/dev/null
          buildah run ${CONTAINER} sh -c 'cargo wasi --version'
          echo 'CARGO BIN INSTALL: cli utilites'
          buildah run ${CONTAINER} sh -c "cargo install cargo-binstall" &>/dev/null
          buildah run ${CONTAINER} sh -c 'ln -s /usr/local/cargo/bin/cargo-binstall /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'cargo-binstall --no-confirm --no-symlinks just ripgrep stylua tree-sitter-cli wasm-pack' 
          buildah run ${CONTAINER} sh -c 'ln -sf /usr/local/cargo/bin/* /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which rg && which just && which stylua'
          echo 'WASMTIME'
          buildah config --env WASMTIME_HOME=/usr/local/wasmtime ${CONTAINER} 
          buildah run ${CONTAINER} sh -c "touch ~/.profile && curl https://wasmtime.dev/install.sh -sSf | bash" &>/dev/null
          buildah run ${CONTAINER} sh -c 'ln -sf /usr/local/wasmtime/bin/* /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which wasmtime && wasmtime --help'
          echo 'SPIN'
          buildah run ${CONTAINER} sh -c 'mkdir -p /usr/local/spin '
          buildah run ${CONTAINER} sh -c 'cd /usr/local/spin && curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash' &>/dev/null
          buildah run ${CONTAINER} sh -c 'cd /usr/local/spin && ls -al .'
          buildah run ${CONTAINER} sh -c 'ln -s /usr/local/spin/spin /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which spin && spin --version && spin --help'
          echo 'COMMIT and PUSH'
          buildah commit --rm --squash ${CONTAINER} ghcr.io/${{ github.repository_owner }}/tbx:${{ env.VERSION }}
          buildah tag ghcr.io/${{ github.repository_owner }}/tbx:${{ env.VERSION }} ghcr.io/${{ github.repository_owner }}/tbx:latest
          buildah push ghcr.io/${{ github.repository_owner }}/tbx:${{ env.VERSION }}
          buildah push ghcr.io/${{ github.repository_owner }}/tbx:latest


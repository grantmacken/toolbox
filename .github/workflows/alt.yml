name: toolbox_builds
on: push
# on: workflow_dispatch
env:
  FEDORA_VER: '39'
  GO_VER: 'go1.21.4'
  RUST_VER: '1.74.0'
  RUSTUP_TAG: '1.26.0'
  RUSTARCH: 'x86_64-unknown-linux-gnu'
  REPO_OWNER: ${{ github.actor }}
  GITHUB_PASSWORD: ${{ github.token }}
  GITHUB_REGISTRY: ghcr.io/${{ github.repository_owner }}
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # - name: Log in to quay.io
      #   uses: redhat-actions/podman-login@v1
      #   with:
      #     username: ${{ env.REGISTRY_USER }}
      #     password: ${{ env.GITHUB_PASSWORD }}
      #     registry: quay.io
      # - name: Log in to ghcr.io
      #   uses: redhat-actions/podman-login@v1
      #   with:
      #     username: ${{ env.REPO_OWNER }}
      #     password: ${{ env.GITHUB_PASSWORD }}
      #     registry: ${{ env.GITHUB_REGISTRY }} 
      # - name: build editor base
      #   run: |
      #     set -euxo pipefail
      #     FEDORA_VER=${{ env.FEDORA_VER }}
      #     CONTAINER=$(buildah from quay.io/toolbx-images/fedora-toolbox:${FEDORA_VER})
      #     buildah run ${CONTAINER} sh -c 'dnf -y install ninja-build cmake gcc make unzip gettext' &>/dev/null
      #     buildah run ${CONTAINER} sh -c 'dnf clean all'&>/dev/null
      #     echo 'NEOVIM'
      #     buildah run ${CONTAINER} sh -c 'git clone https://github.com/neovim/neovim && cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo && make install' &>/dev/null
      #     buildah run ${CONTAINER} sh -c 'which nvim && nvim --version'
      #     echo 'commit push neovim toolbox'
      #     buildah commit --rm ${CONTAINER} localhost/tbx_neovim:${FEDORA_VER}
      #     buildah tag localhost/tbx_neovim:${FEDORA_VER} ghcr.io/${{ env.REPO_OWNER }}/tbx_neovim:${FEDORA_VER}
      #     podman push ghcr.io/${{ env.REPO_OWNER }}/tbx_neovim:${FEDORA_VER}
      # - name: language build, golang
      #   run: |
      #     set -euxo pipefail
      #     FEDORA_VER=${{ env.FEDORA_VER }}
      #     CONTAINER=$(buildah from quay.io/toolbx-images/fedora-toolbox:${FEDORA_VER})
      #     #CONTAINER=$(buildah from localhost/tbx_cli:${FEDORA_VER})
      #     echo 'GOLANG'
      #     # buildah config --env GO_VER=${{ env.GO_VER }} ${CONTAINER}
      #     buildah run ${CONTAINER} sh -c 'wget -q -O go.tgz https://go.dev/dl/${{ env.GO_VER }}.linux-amd64.tar.gz && tar -C /usr/local -xzf go.tgz'
      #     buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/go && ln -s /usr/local/go/bin/* /usr/local/bin/'
      #     buildah run ${CONTAINER} sh -c 'which go'
      #     buildah commit --rm ${CONTAINER} localhost/tbx_lang_go:${FEDORA_VER}
      - name: language build, rust
        run: |
          set -euxo pipefail
          FEDORA_VER=${{ env.FEDORA_VER }}
          CONTAINER=$(buildah from quay.io/toolbx-images/fedora-toolbox:${FEDORA_VER})
          buildah config --env RUSTUP_HOME=/usr/local/rustup --env CARGO_HOME=/usr/local/cargo ${CONTAINER}
          buildah run ${CONTAINER} sh -c 'curl https://sh.rustup.rs -sSf | sh -s -- -y'
          buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/rustup /usr/local/cargo && ln -s /usr/local/cargo/bin/* /usr/local/bin/'
          buildah run ${CONTAINER} sh -c 'which rustup && rustup --version' || true
          buildah run ${CONTAINER} sh -c 'rustup show' 
          buildah run ${CONTAINER} sh -c 'rustup component add rustfmt clippy rust-analyzer' # &>/dev/null
          buildah run ${CONTAINER} sh -c 'rustup target add wasm32-wasi' # &>/dev/null
          buildah run ${CONTAINER} sh -c 'rustup target add wasm32-unknown-unknown' # &>/dev/null # to compile our example Wasm/WASI files for testing
          buildah run ${CONTAINER} sh -c 'rustup show' 
          buildah run ${CONTAINER} sh -c 'which cargo && cargo --version'
          buildah run ${CONTAINER} sh -c 'cargo install -v cargo-wasi'
          buildah run ${CONTAINER} sh -c 'cargo wasi --version'
          # buildah run ${CONTAINER} sh -c 'which cargo && cargo --version'
      # - name: cli build,  wasmtime and spin
      #   run: |
      #     set -euxo pipefail
      #     FEDORA_VER=${{ env.FEDORA_VER }}
      #     CONTAINER=$(buildah from localhost/tbx_neovim:${FEDORA_VER})
      #     echo 'WASMTIME'
      #     buildah config --env WASMTIME_HOME=/usr/local/wasmtime ${CONTAINER}
      #     buildah run ${CONTAINER} sh -c "touch ~/.profile && curl https://wasmtime.dev/install.sh -sSf | bash"
      #     buildah run ${CONTAINER} sh -c 'ln -sf /usr/local/wasmtime/bin/* /usr/local/bin/'
      #     buildah run ${CONTAINER} sh -c 'which wasmtime && wasmtime --help'
      #     echo 'SPIN'
      #     buildah run ${CONTAINER} sh -c 'mkdir -p /usr/local/spin '
      #     buildah run ${CONTAINER} sh -c 'cd /usr/local/spin && curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash' &>/dev/null
      #     buildah run ${CONTAINER} sh -c 'cd /usr/local/spin && ls -al .'
      #     buildah run ${CONTAINER} sh -c 'ln -s /usr/local/spin/spin /usr/local/bin/'
      #     buildah run ${CONTAINER} sh -c 'which spin && spin --version && spin --help'
      #     buildah commit --rm ${CONTAINER} localhost/tbx_cli:${FEDORA_VER}
      #     podman images
          # buildah config --env RUSTUP_HOME=/usr/local/rustup --env CARGO_HOME=/usr/local/cargo ${CONTAINER} 

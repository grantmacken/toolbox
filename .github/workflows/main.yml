name: CI
on: push
jobs:
  tbx_golang:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - name: Build
      run: |
        set -euxo pipefail
        CONTAINER=$(buildah from ghcr.io/grantmacken/tbx-base)
        echo 'GOLANG'
        GO_VER="$(curl -s https://go.dev/dl/ | grep -m 1 -oP 'go(\d+\.){2}\d+')"
        buildah run ${CONTAINER} sh -c "wget -q -O go.tgz https://go.dev/dl/${GO_VER}.linux-amd64.tar.gz && tar -C /usr/local -xzf go.tgz"
        buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/go && ln -s /usr/local/go/bin/* /usr/local/bin/'
        buildah run ${CONTAINER} sh -c 'which go'
  # tbx_rustup:
  #   needs: tbx_base
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #   - name: Download
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: tbx_base
  #       path: artifacts
  #   - name: Load
  #     run: cat artifacts/tbx_base.tar | podman load
  #   - name: Build
  #     run: |
  #       CONTAINER=$(buildah from localhost/tbx_base:latest)
  #       echo 'RUSTUP'
  #       buildah config --env RUSTUP_HOME=/usr/local/rustup --env CARGO_HOME=/usr/local/cargo ${CONTAINER}
  #       buildah run ${CONTAINER} sh -c 'curl https://sh.rustup.rs -sSf | sh -s -- -y'
  #       buildah run ${CONTAINER} sh -c 'chmod -R a+w /usr/local/rustup /usr/local/cargo && ln -s /usr/local/cargo/bin/* /usr/local/bin/'
  #       buildah run ${CONTAINER} sh -c 'which rustup && rustup --version' 
  #       buildah run ${CONTAINER} sh -c 'which rustfmt && rustfmt --version'  # Formatter
  #       buildah run ${CONTAINER} sh -c 'which rust-analyzer' # LSP
  # tbx_cli:
  #   needs: tbx_base
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #   - name: Download
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: tbx_base
  #       path: artifacts
  #   - name: Load
  #     run: cat artifacts/tbx_base.tar | podman load
  #   - name: Build
  #     run: |
  #       CONTAINER=$(buildah from localhost/tbx_base:latest)
  #       echo 'WASMTIME'
  #       buildah config --env WASMTIME_HOME=/usr/local/wasmtime ${CONTAINER} 
  #       buildah run ${CONTAINER} sh -c "touch ~/.profile && curl https://wasmtime.dev/install.sh -sSf | bash" 
  #       # buildah run ${CONTAINER} sh -c 'ln -sf /usr/local/wasmtime/bin/* /usr/local/bin/'
  #       # buildah run ${CONTAINER} sh -c 'which wasmtime && wasmtime --help'
  #       # echo 'SPIN'
  #       # buildah run ${CONTAINER} sh -c 'mkdir -p /usr/local/spin '
  #       # buildah run ${CONTAINER} sh -c 'cd /usr/local/spin && curl -fsSL https://developer.fermyon.com/downloads/install.sh | bash' &>/dev/null
  #       # buildah run ${CONTAINER} sh -c 'cd /usr/local/spin && ls -al .'
  #       # buildah run ${CONTAINER} sh -c 'ln -s /usr/local/spin/spin /usr/local/bin/'
  #       # buildah run ${CONTAINER} sh -c 'which spin && spin --version && spin --help'
  #
  # #   needs: tbx_base
  # #   runs-on: ubuntu-latest
  # #   timeout-minutes: 10
  # #   steps:
  # #   - uses: actions/download-artifact@v3
  # #     with:
  # #       name: tbx_base
  # #       path: tbx_base.tar
  # #   - name: Load
  # #     run: cat tbx_base.tar | podman load
  # #   - name: Show
  # #     run: podman images
  # # tbx_wasi_cli:
  # #   needs: tbx_base
  # #   runs-on: ubuntu-latest
  # #   timeout-minutes: 10
  # #   steps:
  # #   - uses: actions/download-artifact@v3
  # #     with:
  # #       name: tbx_base
  # #       path: tbx_base.tar
  # #   - name: Load
  # #     run: podman load tbx_base.tar
  # #   - name: Show
  # #     run: podman images
